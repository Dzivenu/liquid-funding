{"version":3,"sources":["selectors/vault.js","components/TransfersGraph.jsx"],"names":["getAuthorizations","createSelector","vaultEvents","filter","event","Cytoscape","use","dagre","layout","name","stylesheet","selector","style","width","height","fontSize","color","label","curveStyle","targetArrowShape","arrowScale","createElements","transfers","isNil","nodes","edges","authorizations","forEach","transfer","_transfer$returnValue","returnValues","amount","from","to","push","data","id","concat","source","target","toEther","auth","_auth$returnValues","dest","token","ref","reference","Number","slice","toString","isNaN","getTokenLabel","Object","toConsumableArray","uniq","withDatabase","withObservables","_ref2","database","collections","get","query","Q","where","observe","_ref","react_default","a","createElement","react","react_cytoscape_default","elements"],"mappings":"8PAEaA,EAAoBC,YAC/B,CAAC,SAAAC,GAAW,OAAIA,EAAYC,OAAO,SAAAC,GAAK,MAAoB,qBAAhBA,EAAMA,UAClD,SAAAA,GAAK,OAAIA,ICUXC,IAAUC,IAAIC,KACd,IAAMC,EAAS,CAAEC,KAAM,SAEjBC,EAAa,CACjB,CACEC,SAAU,OACVC,MAAO,CACLC,MAAO,EACPC,OAAQ,EACRC,SAAU,MACVC,MAAO,OACPC,MAAO,gBAGX,CACEN,SAAU,OACVC,MAAO,CACLK,MAAO,cACPC,WAAY,SACZC,iBAAkB,WAClBC,WAAY,GACZL,SAAU,MACVF,MAAO,KAKPQ,EAAiB,SAACC,EAAWpB,GACjC,GAAIqB,YAAMD,IAAcC,YAAMrB,GAAc,MAAO,GACnD,IAAMsB,EAAQ,GACRC,EAAQ,GACRC,EAAiB1B,EAAkBE,GAyBzC,OAxBAoB,EAAUK,QAAQ,SAAAC,GAAY,IAAAC,EACmBD,EAAvCE,aAAgBC,EADIF,EACJE,OAAQC,EADJH,EACIG,KAAMC,EADVJ,EACUI,GACtCT,EAAMU,KAAK,CACTC,KAAM,CAAEC,GAAa,MAATJ,EAAe,iBAAmBA,EAAMf,MAAK,aAAAoB,OAAeL,MAE1ER,EAAMU,KAAK,CACTC,KAAM,CAAEC,GAAIH,EAAIhB,MAAK,aAAAoB,OAAeJ,MAEtCR,EAAMS,KAAK,CACTC,KAAM,CAAEG,OAAiB,MAATN,EAAe,iBAAmBA,EAAMO,OAAQN,EAAIhB,MAAOuB,YAAQT,QAGvFL,EAAeC,QAAQ,SAAAc,GAAQ,IAAAC,EAC0BD,EAA/CX,aAAgBC,EADKW,EACLX,OAAQY,EADHD,EACGC,KAAMC,EADTF,EACSE,MAAOC,EADhBH,EACgBG,IACvCC,EAAYC,OAAOF,EAAIG,MAAM,IAAIC,WAClCC,MAAMJ,KACTtB,EAAMU,KAAK,CACTC,KAAM,CAAEC,GAAIO,EAAM1B,MAAO0B,KAE3BlB,EAAMS,KAAK,CACTC,KAAM,CAAEG,OAAQQ,EAAWP,OAAQI,EAAM1B,MAAK,YAAAoB,OAAcG,YAAQT,GAAtB,KAAAM,OAAiCc,YAAcP,UAInG,GAAAP,OAAAe,OAAAC,EAAA,EAAAD,CACKE,YAAK9B,IACLC,IAsBQ8B,iCAAaC,YAAgB,GAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,MAAmB,CACjEpC,UAAWoC,EAASC,YAAYC,IAAI,aAAaC,MAC/CC,IAAEC,MAAM,QAAS,aACjBC,UACF9D,YAAcwD,EAASC,YAAYC,IAAI,gBAAgBC,QAAQG,YAJrCR,CAlBL,SAAAS,GAAgC,IAA7B3C,EAA6B2C,EAA7B3C,UAAWpB,EAAkB+D,EAAlB/D,YACnC,OACEgE,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,SAAUlD,EAAeC,EAAWpB,GACpCU,MAAQ,CAAEC,MAAO,QAASC,OAAQ,OAAQC,SAAU,QACpDL,WAAYA,EACZF,OAAQA","file":"static/js/29.227c3780.chunk.js","sourcesContent":["import { createSelector } from 'reselect'\n\nexport const getAuthorizations = createSelector(\n  [vaultEvents => vaultEvents.filter(event => event.event === 'AuthorizePayment')],\n  event => event\n)\n","import Cytoscape from 'cytoscape'\nimport dagre from 'cytoscape-dagre'\nimport React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport CytoscapeComponent from 'react-cytoscapejs'\nimport withObservables from '@nozbe/with-observables'\nimport { Q } from '@nozbe/watermelondb'\nimport { withDatabase } from '@nozbe/watermelondb/DatabaseProvider'\nimport { uniq, isNil } from 'ramda'\nimport { toEther } from '../utils/conversions'\nimport { getTokenLabel } from '../utils/currencies'\nimport { getAuthorizations } from '../selectors/vault'\n\n\nCytoscape.use(dagre)\nconst layout = { name: 'dagre' }\n\nconst stylesheet = [\n  {\n    selector: 'node',\n    style: {\n      width: 5,\n      height: 5,\n      fontSize: '5px',\n      color: 'blue',\n      label: 'data(label)'\n    }\n  },\n  {\n    selector: 'edge',\n    style: {\n      label: 'data(label)',\n      curveStyle: 'bezier',\n      targetArrowShape: 'triangle',\n      arrowScale: 0.5,\n      fontSize: '5px',\n      width: 1\n    }\n  }\n]\n\nconst createElements = (transfers, vaultEvents) => {\n  if (isNil(transfers) || isNil(vaultEvents)) return []\n  const nodes = []\n  const edges = []\n  const authorizations = getAuthorizations(vaultEvents)\n  transfers.forEach(transfer => {\n    const { returnValues: { amount, from, to } } = transfer\n    nodes.push({\n      data: { id: from === '0' ? 'Create Funding' : from, label: `Pledge Id ${from}` }\n    })\n    nodes.push({\n      data: { id: to, label: `Pledge Id ${to}` }\n    })\n    edges.push({\n      data: { source: from === '0' ? 'Create Funding' : from, target: to, label: toEther(amount) }\n    })\n  })\n  authorizations.forEach(auth => {\n    const { returnValues: { amount, dest, token, ref } } = auth\n    const reference = Number(ref.slice(2)).toString()\n    if (!isNaN(reference)) {\n      nodes.push({\n        data: { id: dest, label: dest }\n      })\n      edges.push({\n        data: { source: reference, target: dest, label: `Withdraw ${toEther(amount)} ${getTokenLabel(token)}`}\n      })\n    }\n  })\n  return [\n    ...uniq(nodes),\n    ...edges\n  ]\n}\n\nconst TransfersGraph = ({ transfers, vaultEvents }) => {\n  return (\n    <Fragment>\n      <CytoscapeComponent\n        elements={createElements(transfers, vaultEvents)}\n        style={ { width: '100vw', height: '100%', fontSize: '14px' } }\n        stylesheet={stylesheet}\n        layout={layout}\n      />\n    </Fragment>\n  )\n}\n\nTransfersGraph.propTypes = {\n  transfers: PropTypes.array.isRequired,\n  vaultEvents: PropTypes.array.isRequired\n}\n\nexport default withDatabase(withObservables([], ({ database }) => ({\n  transfers: database.collections.get('lp_events').query(\n    Q.where('event', 'Transfer')\n  ).observe(),\n  vaultEvents : database.collections.get('vault_events').query().observe()\n}))(TransfersGraph))\n"],"sourceRoot":""}