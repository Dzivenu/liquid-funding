{"version":3,"sources":["utils/dates.js","utils/project.js","components/projects/queries.js","components/base/Button.jsx","components/Pledges.jsx"],"names":["timeSinceBlock","date","arguments","length","undefined","interval","date1","Date","date2","timediff","isNaN","NaN","getFullYear","getMonth","Math","floor","day","hour","minute","second","getDateCreated","daysSince","d","setDate","getDate","concat","getDateFromTimestamp","ts","pretty","toLocaleString","month","__webpack_require__","__webpack_exports__","generateChatRoom","formatProjectId","getProjectManifest","getMediaType","setMediaType","getMediaSrc","utils","web3","title","replace","toLowerCase","id","toHex","getName","asset","path","split","slice","isManifest","assets","JSON","parse","find","content","hasManifest","media","type","includes","url","match","file","blob","Blob","URL","createObjectURL","formatMedia","a","pledgeLifetimeReceived","gql","_templateObject","pledgesInfosFields","_templateObject2","pledgeFields","_templateObject3","getProfileById","_templateObject4","getProfileWithPledges","_templateObject5","getProjects","_templateObject6","useStyles","makeStyles","theme","check","color","palette","primary","formButton","gridColumnStart","gridColumnEnd","minHeight","marginTop","borderRadius","backgroundColor","&:hover","disabledButton","buttonContent","Object","_Users_Barry_projects_status_im_liquid_funding_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","display","justifyContent","alignItems","width","fontSize","breakpoints","up","progress","animationDuration","StatusButton","props","className","disabled","buttonText","confirmed","loading","onClick","classes","react__WEBPACK_IMPORTED_MODULE_1___default","createElement","react__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_4__","classnames","variant","_material_ui_icons_Check__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_6__","size","disableShrink","mWithdraw","LiquidPledging","methods","multiConfirm","LPVault","PAYING","PAID","pledgeTypes","0","1","2","main","gridTemplateColumns","gridTemplateRows","tableHeader","headerStatus","gridColumn","rowStatus","headerAmount","rowAmount","headerId","rowId","headerFunded","rowFunded","headerSelect","select","checkBox","paddingTop","& svg","background","checked","&&:hover","TableHeader","_ref","allSelected","selectAll","react__WEBPACK_IMPORTED_MODULE_4___default","react__WEBPACK_IMPORTED_MODULE_4__","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_6__","_material_ui_core_Checkbox__WEBPACK_IMPORTED_MODULE_7__","root","onChange","disableRipple","TableRow","_ref2","pledge","amtFormatter","tokenLabel","selectedPledges","setSelected","amount","creationTime","pledgeState","isSelected","toDecimal","filter","p","_Users_Barry_projects_status_im_liquid_funding_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__","Pledges","_ref3","_useState","useState","_useState2","_Users_Barry_projects_status_im_liquid_funding_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","_useState3","_useState4","submitted","setSubmitted","_useState5","_useState6","setConfirmed","_useContext","useContext","FundingContext","openSnackBar","currencies","projectId","params","_useQuery","useQuery","variables","error","data","startPolling","stopPolling","useEffect","_base_Loading__WEBPACK_IMPORTED_MODULE_16__","message","_data$profile","profile","pledges","goalToken","projectInfo","getHumanAmountFormatter","getTokenLabel","filteredPledges","_ref4","map","key","_base_Button__WEBPACK_IMPORTED_MODULE_17__","formattedPledges","encodePledges","send","on","hash","then","_ref5","_Users_Barry_projects_status_im_liquid_funding_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","res","wrap","_context","prev","next","console","log","stop","_x","apply","this","catch","e"],"mappings":"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","file":"static/js/26.abe98a00.chunk.js","sourcesContent":["export function timeSinceBlock(date=false, interval) {\n  var second=1000, minute=second*60, hour=minute*60, day=hour*24, week=day*7;\n  let date1 = date ? new Date(date*1000) : new Date();\n  let date2 = new Date();\n  var timediff = date2 - date1;\n  if (isNaN(timediff)) return NaN;\n  switch (interval) {\n  case 'years': return date2.getFullYear() - date1.getFullYear();\n  case 'months': return (\n    ((date2.getFullYear() * 12) + date2.getMonth())      -\n      ((date1.getFullYear() * 12) + date1.getMonth())\n  );\n  case 'weeks': return Math.floor(timediff / week)\n  case 'days': return Math.floor(timediff / day)\n  case 'hours': return Math.floor(timediff / hour)\n  case 'minutes': return Math.floor(timediff / minute)\n  case 'seconds': return Math.floor(timediff / second)\n  default: return undefined\n  }\n}\n\nexport function getDateCreated(daysSince) {\n  const d = new Date();\n  d.setDate(d.getDate() - daysSince);\n  return `${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`\n}\n\nexport function getDateFromTimestamp(ts, pretty = false) {\n  const d = new Date(ts*1000);\n  if (pretty) return `${d.getDate()} ${d.toLocaleString('default', { month: 'short'})} ${d.getFullYear()}`\n  return `${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`\n}\n\nexport const convertToHours = seconds => Number(seconds) / 60 / 60\n","/*global web3*/\nimport { uniqBy, length } from 'ramda'\n\nconst { utils } = web3\n\nexport const generateChatRoom = title => `#status-${title.replace(/\\s/g, '').replace(/\\W/g, '').toLowerCase()}`\n\nexport const formatProjectId = id => utils.toHex(id)\nconst getFile = filePath => filePath.split('/').slice(-1)[0]\nconst formatMedia = content => {\n  const blob = new Blob([content])\n  const src = URL.createObjectURL(blob)\n  return src\n}\n\n\nconst getName = asset => asset.path.split('/').slice(-1)[0]\nconst isManifest = asset => {\n  const name = getName(asset)\n  return name.toLowerCase() === 'manifest.json'\n}\nexport const getProjectManifest = assets => {\n  return assets ? JSON.parse(assets.find(isManifest).content) : null\n}\n\nexport function getNumberOfBackers(pledges){\n  return length(uniqBy(p => p.owner, pledges))\n}\n\nconst hasManifest = assets => !!assets.find(isManifest)\nexport const getMediaType = assets => {\n  if (!assets || !hasManifest(assets)) return false\n  const { media } = getProjectManifest(assets)\n  if (media.type.toLowerCase().includes('video')) return true\n}\n\nexport function setMediaType(url) {\n  if (url.match(/\\.(jpeg|jpg|gif|png)$/) !== null) return 'image'\n  return 'video'\n}\n\nexport const getMediaSrc = assets => {\n  if (!assets || !hasManifest(assets)) return null\n  const { media } = getProjectManifest(assets)\n  const validMedia = media.type.includes('video') || media.type.includes('image')\n  if (validMedia) {\n    if (media.url) return media.url\n    if (media.file && media.file !== '/root/') {\n      return formatMedia(\n        assets.find(a => getName(a) === getFile(media.file)).content\n      )\n    }\n  }\n}\n","import { gql } from 'apollo-boost'\n\nexport const pledgeLifetimeReceived = gql`\nfragment PledgeLifetimeReceived on PledgesInfo {\n  lifetimeReceived\n}\n`\nexport const pledgesInfosFields = gql`\n${pledgeLifetimeReceived}\nfragment PledgesInfoFields on PledgesInfo {\n  id\n  ...PledgeLifetimeReceived\n  token\n}\n`\n\nexport const pledgeFields = gql`\nfragment PledgeFields on Pledge {\n      id,\n      amount,\n      token,\n      commitTime,\n      pledgeState,\n      intendedProject,\n      nDelegates,\n      creationTime\n}\n`\n\nexport const getProfileById = gql`\n${pledgesInfosFields}\n\nquery Profile($id: ID!) {\n  profile(id: $id) {\n    id\n    addr\n    commitTime\n    url\n    profileId\n    type\n    name\n    creationTime\n    pledgesInfos {\n      ...PledgesInfoFields\n    }\n    projectInfo {\n      id\n      title\n      subtitle\n      creator\n      repo\n      avatar\n      goal\n      goalToken\n      description\n      chatRoom\n      file\n      type\n      isPlaying\n    }\n  }\n}\n`\n\nexport const getProfileWithPledges = gql`\n${pledgesInfosFields}\n${pledgeFields}\n\nquery Profile($id: ID!) {\n  profile(id: $id) {\n    id\n    addr\n    commitTime\n    url\n    profileId\n    type\n    name\n    creationTime\n    pledgesInfos {\n      ...PledgesInfoFields\n    }\n    pledges(where: {amount_gt: 0}) {\n      ...PledgeFields\n    }\n    projectInfo {\n      id\n      title\n      subtitle\n      creator\n      repo\n      avatar\n      goal\n      goalToken\n      description\n      chatRoom\n      file\n      type\n      isPlaying\n    }\n  }\n}\n`\n\nexport const getProjects = gql`\n${pledgesInfosFields}\n\nquery Projects($type: String! = \"PROJECT\", $limit: Int, $offset: Int, $orderDirection: String){\n  profiles(where: {type: $type, projectInfo_not: null}, first: $limit, skip: $offset, orderBy: profileId, orderDirection: $orderDirection) {\n    id\n    addr\n    canceled\n    commitTime\n    type\n    url\n    profileId\n    creationTime\n    projectInfo {\n      id\n      title\n      subtitle\n      creator\n      goalToken\n      goal\n    }\n    pledgesInfos{\n     ...PledgesInfoFields\n    }\n  }\n}\n`\n","import React, { Fragment } from 'react'\nimport classnames from 'classnames'\nimport { makeStyles } from '@material-ui/styles'\nimport Button from '@material-ui/core/Button'\nimport Check from '@material-ui/icons/Check'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst useStyles = makeStyles(theme => ({\n  check: {\n    color: theme.palette.primary[500]\n  },\n  formButton: {\n    gridColumnStart: '1',\n    gridColumnEnd: '13',\n    minHeight: '50px',\n    marginTop: '1.5rem',\n    borderRadius: '8px',\n    backgroundColor: theme.palette.primary[500],\n    color: 'white',\n    '&:hover': {\n      backgroundColor: theme.palette.primary['hov'],\n    }\n  },\n  disabledButton: {\n    backgroundColor: 'none'\n  },\n  buttonContent: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n    width: '100%',\n    fontSize: '14px',\n    [theme.breakpoints.up('md')]: {\n      fontSize: '14px'\n    }\n  },\n  progress: {\n    color: theme.palette.primary[500],\n    animationDuration: '350ms'\n  }\n}))\n\nfunction StatusButton(props) {\n  const { className, disabled, buttonText, confirmed, loading, onClick } = props\n  const classes = useStyles()\n  const { check, formButton, disabledButton, buttonContent, progress } = classes\n  return (\n    <Fragment>\n      <Button className={classnames(formButton, className)} disabled={disabled} type=\"submit\" variant=\"contained\" classes={{ disabled: disabledButton }} onClick={onClick}>\n        <div className={buttonContent}>\n          {confirmed && <Check className={check} />}\n          {loading && <CircularProgress className={progress} size={24} disableShrink />}\n          {buttonText || ''}\n        </div>\n      </Button>\n    </Fragment>\n  )\n}\n\nexport default StatusButton\n","import React, { Fragment, useState, useContext, useEffect } from 'react'\nimport classnames from 'classnames'\nimport Typography from '@material-ui/core/Typography'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useQuery } from '@apollo/react-hooks'\nimport { formatProjectId } from '../utils/project'\nimport { getProfileWithPledges } from './projects/queries'\nimport { getTokenLabel, getHumanAmountFormatter } from '../utils/currencies'\nimport { toDecimal } from '../utils/conversions'\nimport { getDateFromTimestamp } from '../utils/dates'\nimport { encodePledges } from '../utils/pledges'\nimport Loading from './base/Loading'\nimport StatusButton from './base/Button'\nimport LiquidPledging from '../embarkArtifacts/contracts/LiquidPledging'\nimport LPVault from '../embarkArtifacts/contracts/LPVault'\nimport { FundingContext } from '../context'\nconst { mWithdraw } = LiquidPledging.methods\nconst { multiConfirm } = LPVault.methods\n\nconst PLEDGED = 'Pledged'\nconst PAYING = 'Paying'\nconst PAID = 'Paid'\nconst pledgeTypes = {\n  0: PLEDGED,\n  1: PAYING,\n  2: PAID\n}\n\nconst styles = () => ({\n  main: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(48, [col] 1fr)',\n    gridTemplateRows: '4rem'\n  },\n  tableHeader: {\n    color: 'rgba(147, 155, 161, 0.8)',\n    fontSize: '0.9rem',\n  },\n  headerStatus: {\n    gridColumn: '6 / 12'\n  },\n  rowStatus: {\n    gridColumn: '6 / 12'\n  },\n  headerAmount: {\n    gridColumn: '12 / 18'\n  },\n  rowAmount: {\n    gridColumn: '12 / 18'\n  },\n  headerId: {\n    gridColumn: '18 / 24'\n  },\n  rowId: {\n    gridColumn: '18 / 24'\n  },\n  headerFunded: {\n    gridColumn: '24 / 30'\n  },\n  rowFunded: {\n    gridColumn: '24 / 30'\n  },\n  headerSelect: {\n    gridColumn: '31 / 34'\n  },\n  select: {\n    gridColumn: '34 / 36'\n  },\n  checkBox: {\n    paddingTop: 0,\n    alignItems: 'normal',\n    '&:hover': {\n      backgroundColor: 'transparent'\n    },\n    '& svg': {\n      background: 'radial-gradient(#EEF2F5, transparent)'\n    }\n  },\n  checked: {\n    '&&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  formButton: {\n    gridColumnStart: '24',\n    gridColumnEnd: '36',\n  },\n  disabledButton: {\n    backgroundColor: 'none'\n  }\n})\n\nconst useStyles = makeStyles(styles)\n\nfunction TableHeader({ allSelected, selectAll }) {\n  const classes = useStyles()\n  const { tableHeader } = classes\n  return (\n    <Fragment>\n      <Typography className={classnames(tableHeader, classes.headerStatus)}>Status</Typography>\n      <Typography className={classnames(tableHeader, classes.headerAmount)}>Amount</Typography>\n      <Typography className={classnames(tableHeader, classes.headerId)}>Pledge ID</Typography>\n      <Typography className={classnames(tableHeader, classes.headerFunded)}>Funded on</Typography>\n      <Typography className={classnames(tableHeader, classes.headerSelect)}>Select all</Typography>\n      <Checkbox classes={{ root: classnames(classes.select, classes.checkBox), checked: classes.checked }} checked={allSelected} onChange={selectAll} color=\"primary\" disableRipple />\n    </Fragment>\n  )\n}\n\nfunction TableRow({ pledge, amtFormatter, tokenLabel, selectedPledges, setSelected }) {\n  const classes = useStyles()\n  const { id, amount, creationTime, pledgeState } = pledge\n  const isSelected = selectedPledges ? selectedPledges.includes(id) : false\n  const handleChange = () => {\n    if (isSelected) return setSelected(selectedPledges.filter(p => p !== id))\n    setSelected([...selectedPledges, id])\n  }\n  return (\n    <Fragment>\n      <Typography className={classes.rowStatus}>{pledgeTypes[pledgeState]}</Typography>\n      <Typography className={classes.rowAmount}>{amtFormatter(amount)} {tokenLabel}</Typography>\n      <Typography className={classes.rowId}>{toDecimal(id)}</Typography>\n      <Typography className={classes.rowFunded}>{getDateFromTimestamp(creationTime, true)}</Typography>\n      <Checkbox disabled={pledgeTypes[pledgeState] === PAID} classes={{ root: classnames(classes.select, classes.checkBox), checked: classes.checked }} color=\"primary\" disableRipple checked={isSelected} onChange={handleChange} />\n    </Fragment>\n  )\n}\n\nfunction Pledges({ match }) {\n  const classes = useStyles()\n  const [selectedPledges, setSelected] = useState([])\n  const [submitted, setSubmitted] = useState(false)\n  const [confirmed, setConfirmed] = useState(false)\n  const { openSnackBar, currencies } = useContext(FundingContext)\n  const projectId = match.params.id\n  const { loading, error, data, startPolling, stopPolling } = useQuery(getProfileWithPledges, {\n    variables: { id: formatProjectId(projectId) }\n  });\n  useEffect(() => {\n    stopPolling()\n  }, [data])\n\n  if (loading) return <Loading />\n  if (error) return <div>{`Error! ${error.message}`}</div>\n  const { pledges, projectInfo: { goalToken } } = data.profile\n\n  const amtFormatter = getHumanAmountFormatter(goalToken, currencies)\n  const tokenLabel = getTokenLabel(goalToken, currencies)\n  const filteredPledges = pledges.filter(({ pledgeState }) => pledgeTypes[pledgeState] !== PAID)\n  const allSelected = selectedPledges.length === filteredPledges.length\n  const selectAll = () => {\n    if (allSelected) return setSelected([])\n    setSelected(\n      filteredPledges.map(p => p.id)\n    )\n  }\n\n  const withdrawPledges = () => {\n    const formattedPledges = selectedPledges.map(id => ({\n      id,\n      amount: pledges.find(p => p.id === id).amount\n    }))\n    const pledgeState = selectedPledges[0].pledgeState\n    const sendFn = pledgeTypes[pledgeState] === PAYING ? multiConfirm : mWithdraw\n    const withdrawArgs = encodePledges(formattedPledges)\n    sendFn(withdrawArgs)\n      .send()\n      .on('transactionHash', (hash) => {\n        openSnackBar('success', `Submitted withdraw request to chain. TX Hash: ${hash}`)\n        setSubmitted(true)\n      })\n      .then(async res => {\n        console.log({res})\n        startPolling(1000)\n        openSnackBar('success', 'Funding Confirmed')\n        setSubmitted(false)\n        setConfirmed(true)\n        setSelected([])\n      })\n      .catch(e => {\n        openSnackBar('error', 'An error has occured')\n        setSubmitted(false)\n        console.log({e})\n      })\n  }\n\n  return (\n    <div className={classes.main}>\n      <TableHeader allSelected={allSelected} selectAll={selectAll} />\n      {pledges.map(p => (\n        <TableRow\n          key={p.id}\n          pledge={p}\n          amtFormatter={amtFormatter}\n          tokenLabel={tokenLabel}\n          selectedPledges={selectedPledges}\n          setSelected={setSelected}\n        />\n      ))}\n      <StatusButton\n        className={classes.formButton}\n        onClick={withdrawPledges}\n        buttonText=\"Submit for withdrawal\"\n        confirmed={confirmed}\n        loading={submitted}\n        disabled={submitted || confirmed}\n      />\n    </div>\n  )\n}\n\nexport default Pledges\n"],"sourceRoot":""}